// src/app/api/generate-questions/route.ts
import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Define the question interface
interface Question {
  question: string;
  options: string[];
  correctAnswer: string;
}

// Define the mock data interface
interface MockDataType {
  [key: string]: Question[];
}

// Initialize Gemini API client for free tier
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');
const model = genAI.getGenerativeModel({ model: "gemini-pro" });

// Mock data for different subjects
const mockData: MockDataType = {
  Mathematics: [
    {
      question: "What is the value of π (pi) to two decimal places?",
      options: ["3.14", "3.16", "3.12", "3.18"],
      correctAnswer: "3.14"
    },
    {
      question: "Solve for x: 2x + 5 = 13",
      options: ["x = 4", "x = 5", "x = 3", "x = 6"],
      correctAnswer: "x = 4"
    },
    {
      question: "What is the area of a circle with radius 5 units?",
      options: ["25π square units", "10π square units", "5π square units", "15π square units"],
      correctAnswer: "25π square units"
    },
    {
      question: "What is the square root of 144?",
      options: ["12", "14", "10", "16"],
      correctAnswer: "12"
    },
    {
      question: "If a triangle has angles measuring 30°, 60°, and 90°, what type of triangle is it?",
      options: ["Right triangle", "Equilateral triangle", "Isosceles triangle", "Scalene triangle"],
      correctAnswer: "Right triangle"
    }
  ],
  Science: [
    {
      question: "What is the chemical symbol for gold?",
      options: ["Au", "Ag", "Fe", "Cu"],
      correctAnswer: "Au"
    },
    {
      question: "Which planet is known as the Red Planet?",
      options: ["Mars", "Venus", "Jupiter", "Mercury"],
      correctAnswer: "Mars"
    },
    {
      question: "What is the process by which plants make their own food using sunlight?",
      options: ["Photosynthesis", "Respiration", "Transpiration", "Germination"],
      correctAnswer: "Photosynthesis"
    },
    {
      question: "What is the largest organ in the human body?",
      options: ["Skin", "Liver", "Heart", "Brain"],
      correctAnswer: "Skin"
    },
    {
      question: "Which of these is NOT a state of matter?",
      options: ["Energy", "Solid", "Liquid", "Gas"],
      correctAnswer: "Energy"
    }
  ],
  History: [
    {
      question: "Who was the first President of the United States?",
      options: ["George Washington", "Thomas Jefferson", "Abraham Lincoln", "John Adams"],
      correctAnswer: "George Washington"
    },
    {
      question: "In which year did World War II end?",
      options: ["1945", "1939", "1942", "1950"],
      correctAnswer: "1945"
    },
    {
      question: "Which ancient civilization built the pyramids at Giza?",
      options: ["Ancient Egyptians", "Ancient Greeks", "Romans", "Mayans"],
      correctAnswer: "Ancient Egyptians"
    },
    {
      question: "Who wrote the Declaration of Independence?",
      options: ["Thomas Jefferson", "George Washington", "Benjamin Franklin", "John Adams"],
      correctAnswer: "Thomas Jefferson"
    },
    {
      question: "Which event marked the beginning of World War I?",
      options: ["Assassination of Archduke Franz Ferdinand", "The invasion of Poland", "The sinking of the Lusitania", "The Treaty of Versailles"],
      correctAnswer: "Assassination of Archduke Franz Ferdinand"
    }
  ],
  "General Knowledge": [
    {
      question: "Which is the largest ocean on Earth?",
      options: ["Pacific Ocean", "Atlantic Ocean", "Indian Ocean", "Arctic Ocean"],
      correctAnswer: "Pacific Ocean"
    },
    {
      question: "What is the capital of Japan?",
      options: ["Tokyo", "Beijing", "Seoul", "Bangkok"],
      correctAnswer: "Tokyo"
    },
    {
      question: "Who painted the Mona Lisa?",
      options: ["Leonardo da Vinci", "Pablo Picasso", "Vincent van Gogh", "Michelangelo"],
      correctAnswer: "Leonardo da Vinci"
    },
    {
      question: "Which planet is closest to the Sun?",
      options: ["Mercury", "Venus", "Earth", "Mars"],
      correctAnswer: "Mercury"
    },
    {
      question: "What is the tallest mountain in the world?",
      options: ["Mount Everest", "K2", "Kangchenjunga", "Makalu"],
      correctAnswer: "Mount Everest"
    }
  ],
  "Machine Learning": [
    {
      question: "What is the process of finding patterns in data called?",
      options: ["Data Mining", "Data Cleaning", "Data Visualization", "Data Collection"],
      correctAnswer: "Data Mining"
    },
    {
      question: "Which algorithm is used for classification problems?",
      options: ["Decision Tree", "K-means", "Linear Regression", "Principal Component Analysis"],
      correctAnswer: "Decision Tree"
    },
    {
      question: "What does CNN stand for in deep learning?",
      options: ["Convolutional Neural Network", "Computational Neural Network", "Complex Neural Network", "Continuous Neural Network"],
      correctAnswer: "Convolutional Neural Network"
    },
    {
      question: "Which of these is a supervised learning algorithm?",
      options: ["Support Vector Machine", "K-means clustering", "Apriori algorithm", "Principal Component Analysis"],
      correctAnswer: "Support Vector Machine"
    },
    {
      question: "What is the goal of the backpropagation algorithm?",
      options: ["To update weights in a neural network", "To cluster data points", "To reduce dimensionality", "To generate new data samples"],
      correctAnswer: "To update weights in a neural network"
    }
  ]
};

export async function POST(request: Request) {
  try {
    const { subject, difficulty, numberOfQuestions = 10 } = await request.json();

    if (!subject || !difficulty) {
      return NextResponse.json(
        { error: 'Subject and difficulty are required' },
        { status: 400 }
      );
    }

    try {
      // Create a simplified prompt for Gemini free tier
      const prompt = `Generate ${numberOfQuestions} multiple-choice questions about ${subject} at a ${difficulty} difficulty level. 
      Each question should have 4 options with only one correct answer.
      Format the response as a JSON object with the following structure:
      {
        "questions": [
          {
            "question": "Question text",
            "options": ["Option 1", "Option 2", "Option 3", "Option 4"],
            "correctAnswer": "The correct option (must be exactly the same as one of the options)"
          }
        ]
      }
      Keep the questions educational and appropriate for the difficulty level.`;

      console.log(`Generating questions about ${subject} at ${difficulty} level...`);
      
      // Call Gemini API to generate questions
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const content = response.text();

      if (!content) {
        throw new Error('Failed to generate questions');
      }

      // Parse the JSON response
      try {
        // Clean the response to ensure it's valid JSON by removing code blocks if present
        const cleanedContent = content.replace(/```json|```/g, '').trim();
        
        console.log('Parsing Gemini response...');
        const parsedContent = JSON.parse(cleanedContent);
        const questions = parsedContent.questions || [];

        if (!Array.isArray(questions) || questions.length === 0) {
          throw new Error('No questions in the response');
        }

        console.log(`Successfully generated ${questions.length} questions`);
        return NextResponse.json({ questions });
      } catch (error) {
        console.error('Error parsing Gemini response:', error);
        console.log('Response content:', content);
        throw new Error('Failed to parse generated questions');
      }
    } catch (error) {
      console.error('Error using Gemini API:', error);
      console.log('Falling back to mock data due to API error');
      
      // Fallback to mock data if Gemini API fails
      let questions: Question[] = [];
      
      // Select questions based on subject
      if (mockData[subject]) {
        questions = mockData[subject];
      } else {
        // If subject not found in mock data, use General Knowledge as fallback
        questions = mockData["General Knowledge"];
      }
      
      // Limit the number of questions to the requested amount
      questions = questions.slice(0, numberOfQuestions);
      
      console.log(`Using ${questions.length} mock questions for ${subject}`);
      return NextResponse.json({ 
        questions,
        source: 'mock'
      });
    }
  } catch (error) {
    console.error('Error in generate-questions API route:', error);
    
    // Final fallback - return some basic questions if everything else fails
    const fallbackQuestions = mockData["General Knowledge"].slice(0, 5);
    
    return NextResponse.json({ 
      questions: fallbackQuestions,
      source: 'fallback'
    });
  }
}
